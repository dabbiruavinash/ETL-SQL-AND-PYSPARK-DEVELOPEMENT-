# Analyze subscription plan changes, identify triggers for upgrades/downgrades, and predict future subscription behavior.

WITH subscription_history AS (
    -- Hypothetical subscription changes table
    SELECT 
        sh.user_id,
        sh.old_subscription,
        sh.new_subscription,
        sh.change_date,
        sh.change_type, -- 'upgrade', 'downgrade', 'cancellation'
        sh.reason_code,
        -- User metrics before change
        (SELECT COUNT(DISTINCT vh.content_id)
         FROM viewing_history vh
         JOIN user_profiles up ON vh.profile_id = up.profile_id
         WHERE up.user_id = sh.user_id
         AND vh.start_time BETWEEN DATE_SUB(sh.change_date, INTERVAL 30 DAY) AND sh.change_date
        ) as content_watched_30d,
        (SELECT AVG(vh.completion_percentage)
         FROM viewing_history vh
         JOIN user_profiles up ON vh.profile_id = up.profile_id
         WHERE up.user_id = sh.user_id
         AND vh.start_time BETWEEN DATE_SUB(sh.change_date, INTERVAL 30 DAY) AND sh.change_date
        ) as completion_rate_30d,
        -- Payment history
        (SELECT COUNT(*)
         FROM payments p
         WHERE p.user_id = sh.user_id
         AND p.payment_date BETWEEN DATE_SUB(sh.change_date, INTERVAL 90 DAY) AND sh.change_date
        ) as payment_count_90d
    FROM subscription_changes sh
    WHERE sh.change_date >= DATE_SUB(CURRENT_DATE, INTERVAL 365 DAY)
),
user_demographics AS (
    SELECT 
        sh.user_id,
        u.country,
        u.age,
        u.signup_date,
        DATEDIFF(sh.change_date, u.signup_date) as days_since_signup,
        -- Usage patterns
        COUNT(DISTINCT up.profile_id) as profiles_created,
        COUNT(DISTINCT vh.device_type) as devices_used
    FROM subscription_history sh
    JOIN users u ON sh.user_id = u.user_id
    LEFT JOIN user_profiles up ON u.user_id = up.user_id
    LEFT JOIN viewing_history vh ON up.profile_id = vh.profile_id
    WHERE vh.start_time BETWEEN DATE_SUB(sh.change_date, INTERVAL 60 DAY) AND sh.change_date
    GROUP BY sh.user_id, u.country, u.age, u.signup_date, sh.change_date
),
change_analysis AS (
    SELECT 
        sh.*,
        ud.country,
        ud.age,
        ud.days_since_signup,
        ud.profiles_created,
        ud.devices_used,
        -- Financial impact
        CASE 
            WHEN sh.new_subscription = 'basic' THEN 9.99
            WHEN sh.new_subscription = 'premium' THEN 15.99
            WHEN sh.new_subscription = 'family' THEN 19.99
            ELSE 0
        END - 
        CASE 
            WHEN sh.old_subscription = 'basic' THEN 9.99
            WHEN sh.old_subscription = 'premium' THEN 15.99
            WHEN sh.old_subscription = 'family' THEN 19.99
            ELSE 0
        END as revenue_impact,
        -- Behavior triggers
        CASE 
            WHEN sh.content_watched_30d > 20 AND sh.completion_rate_30d > 80 THEN 'High Engagement'
            WHEN sh.content_watched_30d < 5 AND sh.completion_rate_30d < 50 THEN 'Low Engagement'
            ELSE 'Moderate Engagement'
        END as engagement_level,
        -- Change pattern classification
        CASE 
            WHEN sh.change_type = 'upgrade' AND ud.days_since_signup < 30 THEN 'Early Upgrade'
            WHEN sh.change_type = 'upgrade' AND sh.content_watched_30d > 15 THEN 'Usage-Based Upgrade'
            WHEN sh.change_type = 'downgrade' AND sh.content_watched_30d < 5 THEN 'Underutilization Downgrade'
            WHEN sh.change_type = 'downgrade' AND sh.payment_count_90d > 1 THEN 'Payment Issue Downgrade'
            ELSE 'Other'
        END as change_pattern
    FROM subscription_history sh
    JOIN user_demographics ud ON sh.user_id = ud.user_id
),
upgrade_predictors AS (
    SELECT 
        ca.change_type,
        ca.change_pattern,
        ca.country,
        -- Statistical analysis
        COUNT(*) as change_count,
        AVG(ca.content_watched_30d) as avg_content_watched,
        AVG(ca.completion_rate_30d) as avg_completion_rate,
        AVG(ca.days_since_signup) as avg_days_since_signup,
        AVG(ca.profiles_created) as avg_profiles,
        AVG(ca.devices_used) as avg_devices,
        -- Success rate (users who didn't churn in 60 days after change)
        SUM(CASE WHEN NOT EXISTS (
            SELECT 1 FROM subscription_changes sc2 
            WHERE sc2.user_id = ca.user_id 
            AND sc2.change_type = 'cancellation'
            AND sc2.change_date BETWEEN ca.change_date AND DATE_ADD(ca.change_date, INTERVAL 60 DAY)
        ) THEN 1 ELSE 0 END) * 100.0 / COUNT(*) as success_rate_pct
    FROM change_analysis ca
    GROUP BY ca.change_type, ca.change_pattern, ca.country
    HAVING COUNT(*) >= 10
),
retention_opportunities AS (
    SELECT 
        up.*,
        -- Opportunity score
        (up.success_rate_pct * 0.4 +
         up.change_count * 0.0001 * 0.3 +
         CASE WHEN up.change_type = 'upgrade' THEN up.avg_content_watched * 0.3 ELSE 0 END) as opportunity_score,
        -- Intervention recommendations
        CASE 
            WHEN up.change_pattern = 'Underutilization Downgrade' AND up.avg_completion_rate > 70 THEN 
                'Content Recommendations - User engaged but watching less'
            WHEN up.change_pattern = 'Early Upgrade' AND up.avg_days_since_signup < 15 THEN 
                'Welcome Offer - Capitalize on early interest'
            WHEN up.change_pattern = 'Usage-Based Upgrade' AND up.avg_devices > 2 THEN 
                'Family Plan Promotion - Multiple devices detected'
            WHEN up.success_rate_pct < 60 THEN 
                'Post-Change Engagement Campaign'
            ELSE 'Standard Retention Program'
        END as intervention_strategy
    FROM upgrade_predictors up
)
SELECT 
    change_type,
    change_pattern,
    country,
    change_count,
    success_rate_pct,
    opportunity_score,
    intervention_strategy,
    -- Target user count
    (SELECT COUNT(DISTINCT u.user_id)
     FROM users u
     JOIN user_demographics ud ON u.user_id = ud.user_id
     WHERE u.country = ro.country
     AND ud.days_since_signup BETWEEN ro.avg_days_since_signup - 30 AND ro.avg_days_since_signup + 30
     AND NOT EXISTS (
         SELECT 1 FROM subscription_changes sc 
         WHERE sc.user_id = u.user_id 
         AND sc.change_type = ro.change_type
         AND sc.change_date >= DATE_SUB(CURRENT_DATE, INTERVAL 90 DAY)
     )
    ) as potential_target_users,
    -- Expected impact
    (ro.opportunity_score * 0.01 * 
     (SELECT COUNT(DISTINCT u.user_id)
      FROM users u
      WHERE u.country = ro.country
      AND u.subscription_type = 
          CASE WHEN ro.change_type = 'upgrade' THEN 'basic' 
               WHEN ro.change_type = 'downgrade' THEN 'premium' 
               ELSE 'basic' END
     ) * 
     CASE WHEN ro.change_type = 'upgrade' THEN 6.0 ELSE -6.0 END
    ) as estimated_annual_impact
FROM retention_opportunities ro
ORDER BY opportunity_score DESC;